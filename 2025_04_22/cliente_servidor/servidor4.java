import java.net.*;
import java.io.*;

/**
 * Servidor TCP Concorrente
 * 
 * Este programa implementa um servidor TCP que aceita m√∫ltiplas conex√µes
 * simult√¢neas, criando uma thread dedicada para cada cliente conectado.
 * Permite comunica√ß√£o bidirecional cont√≠nua com cada cliente.
 * 
 * Funcionalidades:
 * - Servidor multi-threaded para m√∫ltiplos clientes simult√¢neos
 * - Thread dedicada para cada cliente (usando ServidorThread)
 * - Escuta cont√≠nua na porta 4321
 * - Logs detalhados de conex√µes
 * - Tratamento robusto de exce√ß√µes
 * 
 * @author Andre
 * @version 1.0
 * @since 27/05/2025
 */
public class Servidor4 {

    /** Porta padr√£o onde o servidor ir√° escutar */
    private static final int PORTA_SERVIDOR = 4321;

    /** Backlog m√°ximo de conex√µes pendentes */
    private static final int BACKLOG_MAXIMO = 300;

    /** Contador de clientes conectados */
    private static int contadorClientes = 0;

    /**
     * M√©todo principal que inicia o servidor TCP concorrente.
     * 
     * @param args argumentos da linha de comando (n√£o utilizados)
     */
    public static void main(String[] args) {
        Servidor4 servidor = new Servidor4();
        servidor.iniciarServidor();
    }

    /**
     * Inicia o servidor e entra no loop principal de aceita√ß√£o de conex√µes.
     */
    public void iniciarServidor() {
        ServerSocket serverSocket = null;

        try {
            // Cria socket do servidor
            serverSocket = new ServerSocket(PORTA_SERVIDOR, BACKLOG_MAXIMO);

            exibirInformacaoInicializacao();

            // Loop principal do servidor
            while (true) {
                try {
                    // Aguarda nova conex√£o de cliente
                    Socket clienteSocket = serverSocket.accept();
                    contadorClientes++;

                    // Log da nova conex√£o
                    logNovaConexao(clienteSocket);

                    // Cria e inicia thread dedicada para o cliente
                    criarThreadCliente(clienteSocket);

                } catch (IOException e) {
                    System.err.println("‚ùå Erro ao aceitar conex√£o: " + e.getMessage());
                    // Continua executando mesmo com erro em conex√£o espec√≠fica
                }
            }

        } catch (IOException e) {
            System.err.println("üí• Erro fatal ao iniciar servidor!");
            System.err.println("Detalhes: " + e.getMessage());
            System.err.println("Verifique se a porta " + PORTA_SERVIDOR + " n√£o est√° em uso.");
        } finally {
            // Garante fechamento do servidor
            fecharServidor(serverSocket);
        }
    }

    /**
     * Exibe informa√ß√µes de inicializa√ß√£o do servidor.
     */
    private void exibirInformacaoInicializacao() {
        System.out.println("=========================================");
        System.out.println("    SERVIDOR TCP CONCORRENTE ATIVO     ");
        System.out.println("=========================================");
        System.out.println("üåê Porta: " + PORTA_SERVIDOR);
        System.out.println("üë• Backlog m√°ximo: " + BACKLOG_MAXIMO);
        System.out.println("üîÑ Modo: Multi-threaded");
        System.out.println("‚è∞ Iniciado em: " + java.time.LocalDateTime.now());
        System.out.println("=========================================");
        System.out.println("üîä Servidor aguardando conex√µes...");
        System.out.println("   (Pressione Ctrl+C para parar)");
        System.out.println("-----------------------------------------");
    }

    /**
     * Registra informa√ß√µes sobre nova conex√£o de cliente.
     * 
     * @param clienteSocket socket do cliente conectado
     */
    private void logNovaConexao(Socket clienteSocket) {
        String enderecoCliente = clienteSocket.getInetAddress().getHostAddress();
        int portaCliente = clienteSocket.getPort();
        String timestamp = java.time.LocalDateTime.now().toString();

        System.out.println("\nüÜï NOVA CONEX√ÉO #" + contadorClientes);
        System.out.println("   üìç Cliente: " + enderecoCliente + ":" + portaCliente);
        System.out.println("   ‚è∞ Timestamp: " + timestamp);
        System.out.println("   üë• Total de clientes ativos: " + contadorClientes);
    }

    /**
     * Cria e inicia uma thread dedicada para atender o cliente.
     * 
     * @param clienteSocket socket do cliente a ser atendido
     */
    private void criarThreadCliente(Socket clienteSocket) {
        try { // Cria thread dedicada para o cliente
            ServidorThread threadCliente = new ServidorThread(clienteSocket);

            // Inicia a thread
            threadCliente.start();

            System.out.println("   üöÄ Thread #" + contadorClientes + " iniciada para o cliente");
            System.out.println("-----------------------------------------");

        } catch (Exception e) {
            System.err.println("‚ùå Erro ao criar thread para cliente: " + e.getMessage());

            // Fecha socket do cliente se n√£o foi poss√≠vel criar thread
            try {
                clienteSocket.close();
                contadorClientes--; // Decrementa contador
            } catch (IOException ex) {
                System.err.println("‚ö†Ô∏è  Erro ao fechar socket do cliente: " + ex.getMessage());
            }
        }
    }

    /**
     * Fecha o servidor de forma segura.
     * 
     * @param serverSocket socket do servidor a ser fechado
     */
    private void fecharServidor(ServerSocket serverSocket) {
        if (serverSocket != null && !serverSocket.isClosed()) {
            try {
                serverSocket.close();
                System.out.println("\nüõë Servidor encerrado.");
                System.out.println("üìä Total de clientes atendidos: " + contadorClientes);
            } catch (IOException e) {
                System.err.println("‚ö†Ô∏è  Erro ao fechar servidor: " + e.getMessage());
            }
        }
    }

    /**
     * M√©todo para obter estat√≠sticas do servidor.
     * 
     * @return n√∫mero total de clientes conectados
     */
    public static int getTotalClientesConectados() {
        return contadorClientes;
    }
}
