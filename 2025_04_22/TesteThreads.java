/**
 * Classe de Thread Trabalhadora para Simula√ß√£o de Corrida
 * 
 * Esta classe estende Thread e implementa uma tarefa que executa
 * um n√∫mero configur√°vel de itera√ß√µes com pausas aleat√≥rias,
 * simulando trabalho concorrente.
 * 
 * Funcionalidades:
 * - Execu√ß√£o de itera√ß√µes configur√°veis
 * - Pausas aleat√≥rias para simular trabalho vari√°vel
 * - Logs detalhados de progresso
 * - Tratamento adequado de interrup√ß√µes
 * 
 * @author Andre
 * @version 1.0
 * @since 27/05/2025
 */
public class TesteThreads extends Thread {

	/** N√∫mero de itera√ß√µes que esta thread deve executar */
	private final int numeroIteracoes;

	/** Tempo m√°ximo de pausa em milissegundos */
	private static final int TEMPO_MAXIMO_PAUSA = 1000;

	/**
	 * Construtor da thread trabalhadora.
	 * 
	 * @param nome            nome identificador da thread
	 * @param numeroIteracoes n√∫mero de itera√ß√µes a executar
	 * @throws IllegalArgumentException se numeroIteracoes for menor que 1
	 */
	public TesteThreads(String nome, int numeroIteracoes) {
		super(nome);

		if (numeroIteracoes < 1) {
			throw new IllegalArgumentException("N√∫mero de itera√ß√µes deve ser maior que 0");
		}

		this.numeroIteracoes = numeroIteracoes;

		// Log de cria√ß√£o da thread
		System.out.println("üÜï Thread criada: " + nome + " (" + numeroIteracoes + " itera√ß√µes)");
	}

	/**
	 * M√©todo principal de execu√ß√£o da thread.
	 * 
	 * Executa o n√∫mero especificado de itera√ß√µes, com pausas aleat√≥rias
	 * entre cada itera√ß√£o para simular trabalho vari√°vel.
	 */
	@Override
	public void run() {
		System.out.println("‚ñ∂Ô∏è  " + getName() + " iniciou execu√ß√£o!");

		try {
			// Executa as itera√ß√µes
			for (int iteracao = 0; iteracao < numeroIteracoes; iteracao++) {
				executarIteracao(iteracao);
			}

			// Log de conclus√£o
			System.out.println("üèÅ " + getName() + " concluiu todas as " + numeroIteracoes + " itera√ß√µes!");

		} catch (InterruptedException e) {
			System.err.println("‚ö†Ô∏è  " + getName() + " foi interrompida na execu√ß√£o!");
			Thread.currentThread().interrupt(); // Restaura status de interrup√ß√£o
		} catch (Exception e) {
			System.err.println("‚ùå Erro em " + getName() + ": " + e.getMessage());
		}
	}

	/**
	 * Executa uma itera√ß√£o individual com pausa aleat√≥ria.
	 * 
	 * @param numeroIteracao n√∫mero da itera√ß√£o atual (baseado em 0)
	 * @throws InterruptedException se a thread for interrompida durante sleep
	 */
	private void executarIteracao(int numeroIteracao) throws InterruptedException {
		// Log do progresso atual
		int porcentagem = (int) (((double) (numeroIteracao + 1) / numeroIteracoes) * 100);
		System.out.println(getName() + " ‚Üí Etapa " + (numeroIteracao + 1) + "/" +
				numeroIteracoes + " (" + porcentagem + "%)");

		// Pausa aleat√≥ria para simular trabalho vari√°vel
		int tempoPausa = (int) (Math.random() * TEMPO_MAXIMO_PAUSA);

		if (tempoPausa > 0) {
			Thread.sleep(tempoPausa);
		}
	}

	/**
	 * Retorna informa√ß√µes sobre o estado atual da thread.
	 * 
	 * @return string com informa√ß√µes da thread
	 */
	@Override
	public String toString() {
		return String.format("TesteThreads{nome='%s', iteracoes=%d, estado=%s}",
				getName(), numeroIteracoes, getState());
	}
}